///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #8
Full Name  : Aditya Mahesh Tambe
Student ID#: 171969223

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1. Offering functions with different return methods provides users with flexibility to suit their needs and programming style. However, this flexibility can lead to confusion and errors if users are unaware of the available options. It is important to understand the different return methods to avoid unintended issues and maintain code clarity.

2. The "calculateTotalCost" function in the workshop lacks ideal cohesion as it combines the responsibilities of calculating the total cost and validating input values. Enhancing cohesion involves separating the validation logic into a separate function. This promotes modularity, making the code easier to comprehend, modify, and test. Similarly, the "displayCatfoodData" function can be improved by accepting a data structure instead of assuming a specific format. This enhances flexibility and reduces coupling between functions.

3. Passing structures to functions offers advantages such as reducing code duplication and improving code readability. By passing a structure instead of multiple arguments, function calls become more concise and easier to read. Additionally, using pointers instead of passing structures by value can enhance performance when dealing with large structures. Pointers allow for passing references instead of creating copies, which can be more efficient. To enhance the "displayCatfoodData" function, passing a pointer to the data structure reduces memory usage and improves performance. Implementing error handling can also prevent crashes or unexpected behavior when encountering invalid data.
