
///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #7
Full Name  : Aditya Mahesh Tambe
Student ID#: 171969223

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1. For loop was used by me to code this logic. The toughest part was 
   "Player positioning and denoting symbols" which was a treasure, the bomb and
   nothing found and many more. Addition to it, more difficult part for this workshop
   was to denote the entered location which was before visited and wanted to revisit.
   The reason for this was since it was really hard to figure out where and how the info
   which was entered was stored and used it while not getting deducted a move counter. But 
   
   On the other side, solution to this logic was which I came across was simply declare the
   the integers for 'position' for the next move by using it to store player's moving history
   in 'player1.position[]' array. it made really easy to store similar data type inputs and made 
   it less difficult to build this logic.

2. In my opinion, I would say it was more easier for me to make it more crisp and to the point by 
   using structures. This helped a lot because If I wanted to use the same variables in another
   functions, all I would have to do is to choose between the structures that I have already created.
   Moreover, If I want to do repeatative thing with not using the structure, it create more compilicaion,
   and would lead me with more error and it will be less efficient and would consume more time and resources
   of the system to compile the things.

3. There are 4 levels which I came across of nesting. These are which I feel are as follows;
	
	for(int i=0; gameEnd==1; i++)
		{
			if(player1.lives != 0 && game.moves!=0)
				{
					if(player1.position[position-1]== 1)
					{
					
					}
			else
			{
				if (game.bomb[position-1]== 1)
					{
						if(game.treasure[position-1] == 1)
						{
						
						}
					}
			}
		}